
assemble() {
for (int i=0; i<n->cn.length; i++)
   assemble(n->cn.nodes[i]);
switch (n->nt)
case '=':
 assemble_expression(n->cn.nodes[1])
 printf("STA V%d", n->nodes[0].vi);
 break;
 case "+": pros8ese ta 2 sto stack kai bale to a8roisma
 case "*":...
}

1: push 1 (STACK[0] = 1)
2: push 2 (STACK[1] = 2)
+: pop 2, pop 1, add, push 3 (A=STACK[1], ADD STACK[0], STA STACK[0])
3: push 3 (STACK[1] = 3)
SUM: push 4 (STACK[2] = 4)
5: push 5 (STACK[3] = 5)
6: push 6 (STACK[4] = 6)
+: pop 6, pop 5, add, push 11 (A=STACK[4], ADD STACK[3], STA STACK[3])
*: pop 11, pop 4, mult, push 44
+: pop 44, pop 3, add, push 47
*: pop 47, pop 3, mult, push 141
=: pop 141, STA V0

PROGRAM(none): FIBONACCI
` T_ID(none): FIBONACCI,V0
` COMP_STMT(none): st=(int sum)
` ` STMT_LIST(none):
` ` ` STMT_LIST(none):
` ` ` ` STMT_LIST(none):
` ` ` ` ` DECLARATION(none):
` ` ` ` ` ` T_INT(none):
` ` ` ` ` ` T_ID(int): sum,V0
` ` ` ` ` ASSIGN_EXPR(int):
` ` ` ` ` ` T_ID(int): sum,V0
` ` ` ` ` ` T_NUM(int): 4
` ` ` ` ASSIGN_EXPR(int):
` ` ` ` ` T_ID(int): sum,V0
` ` ` ` ` *(int):
` ` ` ` ` ` +(int):
` ` ` ` ` ` ` T_NUM(int): 1
` ` ` ` ` ` ` T_NUM(int): 2
` ` ` ` ` ` +(int):
` ` ` ` ` ` ` T_NUM(int): 3
` ` ` ` ` ` ` *(int):
` ` ` ` ` ` ` ` T_ID(int): sum,V0
` ` ` ` ` ` ` ` +(int):
` ` ` ` ` ` ` ` ` T_NUM(int): 5
` ` ` ` ` ` ` ` ` T_NUM(int): 6
` ` ` T_PRINTLN(none):
` ` ` ` T_ID(int): sum,V0

* PROGRAM FIBONACCI
BUF1    CON     0
BUF2    CON     0
BUF3    CON     0
TMP     EQU     3000
BUF     EQU     3001
V0      EQU     2000
        ORIG    100
MAIN    NOP

GrapseKwdikaAssemblyPouNaYpologizeiMiaExprKaiAseMoyToApotelesmaStonA(dexi paidi);
sum=klsdslakfjsldkf
	STA	V0




LP	EQU	18
LPLINE	ORIG	*+24
* EXPRESSION STACK
* I1 IS USED AS ITS "TOP" POINTER
ESTACK	ORIG	*+24
TMP	CON	0
SUM	CON	0
	ORIG	3000
MAIN	NOP


	LDA	=4=
	STA	SUM
	ENT1	0
	LDA	=1=
	STA	ESTACK,1
	LDA	=2=
	ADD	ESTACK,1
	STA	ESTACK,1
	LDA	=3=
	INC1	1
	STA	ESTACK,1
	LDA	SUM
	INC1	1
	STA	ESTACK,1
	LDA 	=5=
	INC1	1
	STA	ESTACK,1
	LDA 	=6=
	ADD	ESTACK,1
	DEC1	1
	MUL	ESTACK,1
	STX	TMP
	LDA	TMP
	DEC1	1
	ADD	ESTACK,1
	DEC1	1
	MUL	ESTACK,1
	STX	TMP
	LDA	TMP
	DEC1	1
	STA	SUM
	LDA	SUM
	CHAR
	STA	LPLINE
	STX	LPLINE+1
	OUT	LPLINE(LP)
	JBUS	*(LP)
	HLT
	END	MAIN
